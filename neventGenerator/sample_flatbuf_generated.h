// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_SAMPLEFLATBUF_H_
#define FLATBUFFERS_GENERATED_SAMPLEFLATBUF_H_

#include "flatbuffers/flatbuffers.h"

struct Event;

struct Event FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_HEADER = 4,
    VT_DATA = 6
  };
  const flatbuffers::String *header() const { return GetPointer<const flatbuffers::String *>(VT_HEADER); }
  const flatbuffers::Vector<uint64_t> *data() const { return GetPointer<const flatbuffers::Vector<uint64_t> *>(VT_DATA); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_HEADER) &&
           verifier.Verify(header()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_DATA) &&
           verifier.Verify(data()) &&
           verifier.EndTable();
  }
};

struct EventBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_header(flatbuffers::Offset<flatbuffers::String> header) { fbb_.AddOffset(Event::VT_HEADER, header); }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint64_t>> data) { fbb_.AddOffset(Event::VT_DATA, data); }
  EventBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  EventBuilder &operator=(const EventBuilder &);
  flatbuffers::Offset<Event> Finish() {
    auto o = flatbuffers::Offset<Event>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<Event> CreateEvent(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> header = 0,
   flatbuffers::Offset<flatbuffers::Vector<uint64_t>> data = 0) {
  EventBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_header(header);
  return builder_.Finish();
}

inline const Event *GetEvent(const void *buf) { return flatbuffers::GetRoot<Event>(buf); }

inline bool VerifyEventBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<Event>(); }

inline void FinishEventBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<Event> root) { fbb.Finish(root); }


#endif  // FLATBUFFERS_GENERATED_SAMPLEFLATBUF_H_
